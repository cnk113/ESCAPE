% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/param.est.pnb.R
\name{param.est.pnb}
\alias{param.est.pnb}
\title{Possion-NB Mixture Model Parameter Estimate}
\usage{
param.est.pnb(y, offsets, ini.pars = list(gamma = NULL, alpha = NULL, delta =
  NULL, s = NULL), max.val = 1e+100, tol = 1e-10, EM.maxIter = 300,
  EM.tol = 1e-04, ...)
}
\arguments{
\item{y}{vector containing expression value for a gene}

\item{offsets}{vector containing log transformed effective 
library size. It could be total counts per 
sample or calculated effective library.}

\item{ini.pars}{list containing initial parameters 
provided by user. If any of them is undefined, 
program will estimate initial parameters from 
data.}

\item{max.val}{maximum value for computation}

\item{tol}{tolerance (minimum value) for computation}

\item{EM.maxIter}{maximum iteration for EM algorithm}

\item{EM.tol}{convergence threshold for EM algorithm}

\item{...}{other arguments passed to optim function. See help 
for optim function.}
}
\value{
a list containing estimate results:
\itemize{
  \item gamma estimation for gamma
  \item alpha estimation for alpha
  \item delta estimation for delta
  \item s estimation for s
  \item z estimation for z
  \item loglik log-likehood
  \item EM.convergence 0, EM algorithm is converged;
                       1, not converged.
  \item iter number of iteration used in EM algorithm
}
}
\description{
Function to estimate parameters for Poisson-NB
             mixutre model. It uses "BFGS", a quasi-Newton 
             method and depends on optim function.
}
\examples{

# generate dataset from Piosson-NB mixture model
pois.nb.mix <- function(n, pars, prob=0.2, offsets, max_val=1e100, tol=1e-10) {

  gamma <- pars[1]
  alpha <- pars[2]
  delta <- pars[3]

  lambda <- pmin(exp(gamma + offsets - mean(offsets)), max_val)
  mu <- pmin(exp(alpha + offsets- mean(offsets)), max_val)
  phi <- max(min(exp(delta), max_val), tol)

  u <- runif(n) 
  out <- apply( as.matrix(u), 1, function(x) ifelse(x<=prob, rpois(1, lambda), rnbinom(1, mu=mu, size=phi) ) )
  out 
}

# generate a test sample
set.seed(2018)
test <- pois.nb.mix(1000, c(-0.5, 7, 1), 0.2, offsets = rep(0,1000))

rs <- param.est(y=test, offsets = rep(0, 1000))
rs$gamma
rs$alpha
rs$delta
rs$s
rs$iter
rs$EM.convergence

}
